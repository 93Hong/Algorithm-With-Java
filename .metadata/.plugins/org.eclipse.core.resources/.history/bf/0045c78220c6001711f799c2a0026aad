import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

public class Main {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static int N, M;
	static int map[][];
	static Queue<Point> q = new LinkedList<>();
	static int dir[][] = { { 2, 1 }, { -2, 1 }, { 2, -1 }, { -2, -1 } };

	public static void main(String args[]) throws IOException {
		String input = br.readLine();
		String sub[] = input.split(" ");
		N = Integer.parseInt(sub[0]);
		M = Integer.parseInt(sub[1]);

		map = new int[N][M];
		q.add(new Point(0, 0));

		solve();
	}

	public static int[] solve() {
		int cnt = 0;
		
		while(!q.isEmpty()) {
			int y = q.peek().y;
			int x = q.peek().x;
			q.poll();
			
			for (int i=0; i<4; i++) {
				int dy = y + dir[i][0];
				int dx = x + dir[i][1];
				
				if (dy < 0 || dy >= N || dx < 0 || dx >= M)
					continue;
				
				if (map[dy][dx] == 0) {
					map[dy][dx] = map[y][x] + 1;
					cnt++;
					q.add(new Point(dy, dx));
				}
			}
		}
		return null;
	}

	static class Point {
		int y, x;

		Point(int y, int x) {
			this.y = y;
			this.x = x;
		}
	}
}
